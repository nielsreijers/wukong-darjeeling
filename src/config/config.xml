<!-- Project template for Darjeeling configurations -->
<project name="config">
	<property name="executable" value="darjeeling.elf"/>
	<property name="outputfile" value="darjeeling.a"/>
	<property name="lib_infusionarchive" value="lib_infusions.dja"/>
	<property name="app_infusionarchive" value="app_infusion.dja"/>
	<property name="infusionelf" value="infusions.o"/>

	<!-- Get the directory where config.xml is located -->
	<dirname property="configpath" file="${ant.file.config}"/>
	<dirname property="configtargetpath" file="${ant.file}"/>
	
	<!-- Import taskdefs.xml and compiler.xml relative to where config.xml is (imports GCC build stuff mostly) -->
	<import file="${configpath}/../taskdefs.xml"/>
	<import file="${configpath}/../djarchive_filetypes.xml"/>
	<import file="${configpath}/../architecture/${architecture}/compiler.xml"/>
	<import file="${configpath}/../platform/${platform}/platform.xml"/>
	
	<!-- source directory where the main.c resides -->
	<property name="c-src" value="${configtargetpath}/c"/>
	<property name="temp" value="${configtargetpath}/build"/>
	<property name="generatedLibInit" value="GENERATEDlibinit.c"/>

	<!-- Construct a list of .a files to include (relative to the lib directory) based on a list of 
	libraries (ie 'base, darjeeling' -> 'base/build/base.a, darjeeling/build/darjeeling.a') -->
	<pathconvert property="nativelibs" pathsep=" ">
		<filelist dir="/" files="${libs}"/>
		<regexpmapper from="\${file.separator}(.*)" to="\1/build/${configuration}/\1.a"/>
	</pathconvert>

	<!-- Construct a list of build files to execute to build the libs -->
	<pathconvert property="libbuildfiles" pathsep=" ">
		<filelist dir="/" files="${libs}"/>
		<regexpmapper from="\${file.separator}(.*)" to="\1/build.xml"/>
	</pathconvert>
	
	<!-- Construct a list of build files to execute to build the apps -->
	<pathconvert property="appbuildfiles" pathsep=" ">
		<filelist dir="/" files="${apps}"/>
		<regexpmapper from="\${file.separator}(.*)" to="\1/build.xml"/>
	</pathconvert>
	
	<pathconvert property="libincludes" pathsep=" ">
		<filelist dir="/" files="${libs}"/>
		<regexpmapper from="\${file.separator}(.*)" to="\1/build/"/>
	</pathconvert>

	<!-- Meta-targets -->
	<target name="all" depends="executable"/>
	<target name="executable" depends="compile-libs, compile-apps, compile-core, compile-platform, unpack, compile-main, packdi, repack, link"/>
	<target name="lib" depends="compile-libs, compile-apps, compile-core, compile-platform, unpack, compile-main, repack"/>
	
	<!-- Compile libraries -->
	<target name="compile-libs">
		<foreach list="${libbuildfiles}" target="do-compile-lib" param="single_libbuildfile" delimiter=" "/>
	</target>
	<target name="do-compile-lib">
		<subant inheritall="true">
			<fileset includes="${single_libbuildfile}" dir="${configpath}/../lib/"/>
		</subant>
	</target>

	<!-- Compile applications -->
	<target name="compile-apps">
		<subant inheritall="true">
			<fileset includes="${appbuildfiles}" dir="${configpath}/../app/"/>
		</subant>
	</target>
	
	<!-- Compile the core C files -->
	<target name="compile-core">
		<subant inheritall="true">
			<fileset includes="build.xml" dir="${configpath}/../core/"/>
		</subant>
	</target>
	
	<!-- Compile the platform -->
	<target name="compile-platform">
		<subant inheritall="true">
			<fileset includes="build.xml" dir="${configpath}/../platform/${platform}"/>
		</subant>
	</target>

	<!--defineset id="platform-defines">
		<define name="AUTOSTART_ENABLE"/>
		<define name="CONTIKI_PLATFORM" value="native"/>
	</defineset-->

	<!-- Generate a file containing calls to <libname>_init functions for each library,
	     as well as the list of native handlers for libraries containing Java code -->
	<target name="generate-lib-init">
		<generatelibinit
			dest="${c-src}/../build/${generatedLibInit}"
			libDir="${configpath}/../lib"
			libraries="${libs}"
		/>
	</target>
	
	<!-- Compile the main.c for this configuration -->
	<target name="compile-main" depends="generate-lib-init">
		<echo message="${c-src}"/>
		<mkdir dir="${temp}/main/"/>
		<platform-compile objectfiles="${temp}/main/">
			<compile-elements>

				<defineset refid="platform-defines"/>
			
				<!-- include directories -->
				<includepath>
					<pathelement path="${configpath}/../architecture/${architecture}/c"/>
					<pathelement path="${configpath}/../platform/${platform}/c"/>
					<pathelement path="${configpath}/../config/${configuration}/c"/>
					<pathelement path="${configpath}/../core/c"/>
					<pathelement path="."/>
					<path refid="platform-includes"/>	
					<path><filelist files="${libincludes}" dir="${configpath}/../lib/"/></path>
				</includepath>
		
				<!-- input files -->
				<fileset dir="${c-src}/..">
					<include name="c/**/*.c"/>
					<include name="build/${generatedLibInit}"/>
				</fileset>
				
			</compile-elements>
		</platform-compile>
	</target>

	<!-- Packs neccesairy .di files (libraries and applications) into a single archive using djarchive. Then it uses objcopy to create a .o file for inclusion in the final executable -->
	<target name="packdi" depends="compile-main">
		<mkdir dir="${temp}/infusions"/>
	
		<!-- Construct a list of library .di files based on a comma separated list of libraries (ie 'base, darjeeling') -->
		<pathconvert property="dilibs-all" pathsep=" ">
			<filelist dir="/" files="${libs}"/>
            <regexpmapper from="\${file.separator}(.*)" to="\1/build/\1.di"/>
		</pathconvert>
		<!-- Some libraries don't contain Java code, so they won't have an infusion. Filter only the existing infusions. -->
		<pathconvert property="dilibs-exist" pathsep=" ">
			<fileset dir="${configpath}/../lib/" includes="${dilibs-all}"/>
		</pathconvert>

		<!-- Construct a list of application .dja files based on a comma separated list of applications (ie 'blink, hello world') -->
		<!-- Note: This is old code that doesn't work well with the current dja setup. -->
		<!--       We can only support a single application for now. -->
		<pathconvert property="diapps" pathsep=" ">
			<filelist dir="/" files="${apps}"/>
			<regexpmapper from="\${file.separator}(.*)" to="/../app/\1/build/\1.dja"/>
            <map from="" to="${configpath}"/>
		</pathconvert>
		
		<delete file="${lib_infusionarchive}"/>
		<delete file="${app_infusionarchive}"/>
		<djarchive dest="${lib_infusionarchive}" src="${dilibs-exist}" filetype="${djarchive_type_lib_infusion}" mode="create"/>
		<copy file="${diapps}" tofile="${app_infusionarchive}"/>

		<!-- Use objcopy to turn the archive into an elf file so it can be linked into the final executable -->
		<platform-objcopy inputfile="${lib_infusionarchive}" outputfile="${temp}/infusions/lib_infusions.o" arrayname="di_lib_infusions_archive"/>
		<platform-objcopy inputfile="${app_infusionarchive}" outputfile="${temp}/infusions/app_infusions.o" arrayname="di_app_infusion_archive"/>
	</target>

	<!-- Unpack the static libraries for the different libraries and the VM into the build directory -->
	<target name="unpack">
		<delete dir="${temp}"/>
		<mkdir dir="${temp}/unpack"/>
		<apply executable="${ar}" parallel="false" dir="${temp}/unpack">
			<arg value="x"/>
			<fileset includes="${nativelibs}" dir="${configpath}/../lib/"/>
			<fileset includes="vm.a" dir="${configpath}/../core/build/${configuration}/"/>
			<fileset includes="platform.a" dir="${configpath}/../platform/${platform}/build/${configuration}"/>
		</apply>
	</target>
	
	<!-- Repack everything that's in the build dir into a single .a file -->
	<target name="repack" depends="unpack">
		<pathconvert property="objectfiles" pathsep=" ">
			<fileset dir="${temp}" includes="**/*.o"/>
		</pathconvert>
		<delete file="${outputfile}"/>
		<exec executable="${ar}">
			<arg line="rcs ${outputfile} ${objectfiles}"/>
		</exec>
	</target>
	
	<!-- Repack everything that's in the build dir into a single .a file -->
	<target name="link" depends="repack">
		<platform-link outputfile="${executable}">
			<link-elements>
				<fileset includes="${outputfile}" dir="."/>
			</link-elements>
		</platform-link>
	</target>

	<!-- Clean the build dir, the VM, and the libraries this configuration depends on -->
	<target name="clean">
		<subant target="clean" inheritall="true">
			<fileset includes="*/build.xml" dir="${configpath}/../lib/"/>
			<fileset includes="*/build.xml" dir="${configpath}/../app/"/>
			<fileset includes="*/build.xml" dir="${configpath}/../platform/"/>
			<fileset includes="build.xml" dir="${configpath}/../core/"/>
		</subant>
		<delete dir="./build"/>
		<delete file="history.xml"/>
		<delete file="${outputfile}"/>
		<delete file="${executable}"/>
	</target>

</project>
