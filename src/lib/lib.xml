<project name="lib" default="all">

	<dirname property="libpath" file="${ant.file.lib}"/>
	<dirname property="targetlibpath" file="${ant.file}"/>
	
	<!-- Default configuration is 'native' -->
	<property name="configuration" value="native"/>
	
	<!-- Import configuration -->
	<import file="${libpath}/../config/${configuration}/build.xml"/>

	<!-- Import taskdefs (infuser, cpptasks) -->
	<import file="${libpath}/../taskdefs.xml"/>
	
	<!-- Import the toolchain for the given architecture-->
	<import file="${libpath}/../architecture/${architecture}/compiler.xml"/>

	<!-- Build output directories. The C code is compiled and output to a seperate directory for each configuration -->
	<property name="build" value="${targetlibpath}/build/"/>
	<property name="configbuild" value="${targetlibpath}/build/${configuration}/"/>
	
	<!-- Check if there's Java code in this library -->
	<available property="contains-java-code" file="${targetlibpath}/java"/>
	<echo message="${targetlibpath} contains java: ${contains-java-code}"/>

	<!-- Java code -->
	<property name="javasrc" value="${targetlibpath}/java"/>
	<property name="classes" value="${build}/class"/>
	<property name="jarfile" value="${build}/${name}.jar"/>
	<property name="bootclasspath" value="${libpath}/base/build/base.jar"/>
	
	<!-- Infuser arguments -->
	<property name="infusionfile" value="${build}/${name}.di"/>
	<property name="infusionheader" value="${build}/${name}.dih"/>
	<property name="infusionhfile" value="${build}/jlib_${name}.h"/>
	<property name="infusioncfile" value="${build}/jlib_${name}.c"/>

	<!-- C code and libs -->
	<property name="csrc" value="${targetlibpath}/c"/>
	<property name="objectfiles" value="${configbuild}/o"/>
	<property name="libraryfile" value="${configbuild}/${name}.a"/>
	
	<!-- Documentation -->
	<property name="doc" value="${targetlibpath}/doc"/>

	<!-- List of jar files to include. Generated by converting a list of library names (ie 'base, darjeeling') into a 
	list of jar files with absolute paths -->
	<pathconvert property="javac-classpath" pathsep=":">
		<filelist dir="/" files="${lib-java-depends}"/>
		<regexpmapper from="\${file.separator}(.*)" to="/\1/build/\1.jar"/>
	</pathconvert>

	<!-- List of library include directories for gcc. Generated by converting a list of library names (ie 'base, darjeeling') -->
	<pathconvert property="cc-include-paths" pathsep=" ">
		<filelist dir="/" files="base darjeeling darjeeling2 radio ${lib-c-depends}"/>
		<regexpmapper from="\${file.separator}(.*)" to="/\1/build/"/>
        <map from="" to="${libpath}"/>
	</pathconvert>
	
	<!-- Meta-target -->
	<target name="lib-specific-pre" />
	<target name="lib-specific-post" />

	<target name="all" depends="lib-specific-pre, create-jar, create-infusion, create-ar, copy-public-headerfile, lib-specific-post"/>
	<target name="build-java-only" depends="lib-specific-pre, create-jar, create-infusion, lib-specific-post"/>

	<!-- compile the java sources -->
	<target name="compile-java" if="${contains-java-code}">
		<mkdir dir="${classes}"/>
		<javac
			srcdir="${javasrc}"
			destdir="${classes}"
			source="1.5"
			debug="true"
			encoding="iso-8859-1"		
			bootclasspath="${bootclasspath}"
			includeantruntime="false"
		>
			<classpath>
				<fileset includes="javac-classpath" dir="${libpath}"/>
			</classpath>
		</javac>
	</target>

	<!-- compile the java sources -->
	<target name="compile-c" depends="create-infusion">
		<platform-compile objectfiles="${objectfiles}">
			<compile-elements>
				<defineset refid="platform-defines"/>
				
				<!-- include directories -->
				<includepath>
					<pathelement path="${libpath}/../architecture/${architecture}/c"/>
					<pathelement path="${libpath}/../platform/${platform}/c"/>
					<pathelement path="${libpath}/../config/${configuration}/c"/>
					<pathelement path="${libpath}/../core/c"/>
					<pathelement path="c/common"/>
					<pathelement path="c/${platform}"/>
					<pathelement path="${build}"/>
					<pathelement path="build"/>
					<path refid="platform-includes"/>
					<path><filelist files="${cc-include-paths}" dir="/"/></path>
				</includepath>
		
				<!-- input files -->
				<fileset dir="${csrc}">
					<include name="common/**/*.c"/>
					<include name="${platform}/**/*.c"/>
				</fileset>
				<fileset dir="${build}" includes="*.c"/>
				
			</compile-elements>
		</platform-compile>
	</target>
	
	<target name="create-ar" depends="compile-c">
		
	    <pathconvert property="objectfilestring" pathsep=" ">
		<path>
		    <fileset dir="${objectfiles}" includes="**/*.o"/>
		</path>
	    </pathconvert>
	    	
	    <exec executable="${ar}">
	    	<arg line="rcs ${build}/${configuration}/${name}.a ${objectfilestring}"/>
	    </exec>
	</target>

	<!-- package the code into a single .jar file -->
	<target name="create-jar" depends="compile-java" if="${contains-java-code}"> 
		<mkdir dir="${build}"/>
		<jar destfile="${jarfile}"> 
			<fileset dir="${classes}"><include name="**/*.class"/></fileset>
		</jar>
	</target>

	<!-- infuse the java code -->
	<target name="create-infusion" depends="compile-java" if="${contains-java-code}"> 
		<!-- List of infuser header files. Generated by converting a list of library names (ie 'base, 
			 darjeeling') into a fileset pointing to the corresponding .dih files. -->
		<pathconvert property="infuser-headers" pathsep=" ">
			<filelist dir="/" files="${lib-java-depends}"/>
			<regexpmapper from="\${file.separator}(.*)" to="\1/build/\1.dih"/>
		</pathconvert>

		<infuser
				name="${name}"
				infusionfile="${infusionfile}"
				headerfile="${infusionheader}"
				hfile="${infusionhfile}"
				cfile="${infusioncfile}">
			<!-- Include the classes -->
			<fileset dir="${classes}" ><include name="**/*.class"/></fileset>
			
			<!-- include .dih files -->
			<!-- "dummy" is there because infuser-headers may be empty, and an empty includes attribute
				 causes ALL files in the directory to be included in the fileset -->
			<fileset id="infuser-include-headers" includes="dummy ${infuser-headers}" dir="${libpath}"/>
		</infuser>
	</target>

	<!-- generate javadoc documentation -->
	<target name="doc">
		<mkdir dir="${doc}"/>
		<javadoc
			sourcepath="${src}"
			destdir="${doc}"
			classpath="${bcelpath}"
		>
		</javadoc>
	</target>

	<target name="copy-public-headerfile">
		<copy todir="${build}" overwrite="true" flatten="true">
			<fileset dir="${csrc}">
				<include name="common/**/${public-headerfile}"/>
				<include name="${platform}/**/${public-headerfile}"/>
			</fileset>
		</copy>
	</target>

	<!-- clean -->
	<target name="clean">
		<delete dir="${build}"/>
		<delete dir="${doc}"/>
	</target>

</project>
