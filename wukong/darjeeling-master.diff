From 7363a201e169a11c69f72b48d86921ba38cb4538 Mon Sep 17 00:00:00 2001
From: Niels Reijers <nielsreijers@gmail.com>
Date: Thu, 21 Mar 2013 17:52:41 +0800
Subject: [PATCH] Applied all previous changes to the darjeeling master to a
 fresh copy of the nanokong master.

---
 wukong/master/baseapp/empty_git_directory.txt      |  1 +
 wukong/master/configuration.py                     | 18 ++---
 wukong/master/wkpf/codegen.py                      | 37 +++++-----
 wukong/master/wkpf/pynvc.py                        | 14 ++++
 wukong/master/wkpf/wkpfcomm.py                     | 83 +++++++++++++++++++++-
 wukong/master/wkpf/wuapplication.py                | 10 +--
 .../xml2java/jinja_templates/application2.java     | 38 +++++-----
 wukong/master/wkpf/xml2java/translator.py          |  4 +-
 8 files changed, 146 insertions(+), 59 deletions(-)
 create mode 100644 wukong/master/baseapp/empty_git_directory.txt

diff --git a/wukong/master/baseapp/empty_git_directory.txt b/wukong/master/baseapp/empty_git_directory.txt
new file mode 100644
index 0000000..d7ebf7c
--- /dev/null
+++ b/wukong/master/baseapp/empty_git_directory.txt
@@ -0,0 +1 @@
+Master still needs a base app, but it's empty for Darjeeling. Refactor this later.
diff --git a/wukong/master/configuration.py b/wukong/master/configuration.py
index df56a5a..404409d 100644
--- a/wukong/master/configuration.py
+++ b/wukong/master/configuration.py
@@ -1,8 +1,8 @@
 import os
 from configobj import ConfigObj
 
-ROOT_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..")
-CONFIG_PATH = os.path.join(ROOT_PATH, 'config', 'master.cfg')
+ROOT_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', '..')
+CONFIG_PATH = os.path.join(ROOT_PATH, 'wukong', 'config', 'master.cfg')
 config = ConfigObj(CONFIG_PATH)
 
 ZWAVE_GATEWAY_IP = config.get('ZWAVE_GATEWAY_IP', '')
@@ -13,10 +13,10 @@ SIMULATION = int(config.get('SIMULATION', 1))
 
 DEPLOY_PLATFORMS = ['avr_mega2560']
 
-#XML_PATH = os.path.join(ROOT_PATH, 'Applications')
-COMPONENTXML_PATH = os.path.join(ROOT_PATH, 'ComponentDefinitions', 'WuKongStandardLibrary.xml')
-TEMPLATE_DIR = os.path.join(ROOT_PATH, 'tools', 'xml2java')
-JAVA_OUTPUT_DIR = os.path.join(ROOT_PATH, 'java', 'examples')
-TESTRTT_PATH = os.path.join(ROOT_PATH, 'tools', 'python', 'pyzwave')
-APP_DIR = os.path.join(ROOT_PATH, 'vm', 'apps')
-BASE_DIR = os.path.join(APP_DIR, 'base')
+#XML_PATH = os.path.join(ROOT_PATH, 'wukong', 'Applications')
+COMPONENTXML_PATH = os.path.join(ROOT_PATH, 'wukong', 'ComponentDefinitions', 'WuKongStandardLibrary.xml')
+TEMPLATE_DIR = os.path.join(ROOT_PATH, 'wukong', 'tools', 'xml2java')
+JAVA_OUTPUT_DIR = os.path.join(ROOT_PATH, 'src', 'app', 'wkdeploy', 'java')
+TESTRTT_PATH = os.path.join(ROOT_PATH, 'wukong', 'tools', 'python', 'pyzwave')
+APP_DIR = os.path.join(ROOT_PATH, 'wukong', 'apps')
+BASE_DIR = os.path.join(ROOT_PATH, 'wukong', 'master', 'baseapp')
diff --git a/wukong/master/wkpf/codegen.py b/wukong/master/wkpf/codegen.py
index 977d507..89c91c1 100755
--- a/wukong/master/wkpf/codegen.py
+++ b/wukong/master/wkpf/codegen.py
@@ -202,9 +202,6 @@ class WuClass:
     def getCUpdateName(self):
         return self.getCName() + "_update"
 
-    def getCPropertyName(self):
-        return self.getCName() + "_properties"
-
     def getCConstName(self):
         return "WKPF_" + self.getJavaConstName()
 
@@ -329,9 +326,9 @@ class WuObject:
 class CodeGen:
     @staticmethod
     def generate(logger, component_string, project_dir):
-        global_vm_dir = os.path.join('vm', 'src')
-        vm_dir = os.path.join('vm', 'src', 'native_wuclasses')
-        java_dir = os.path.join('java', 'nanovm', 'wkpf')
+        global_vm_dir = os.path.join('src', 'lib', 'wkpf', 'c', 'common')
+        vm_dir = os.path.join('src', 'lib', 'wkpf', 'c', 'common', 'native_wuclasses')
+        java_dir = os.path.join('wukong', 'javax', 'wukong', 'virtualwuclasses')
 
         plugin_dir = os.path.join(project_dir, 'plugins')
         template_dir = os.path.join(plugin_dir, 'templates')
@@ -362,7 +359,7 @@ class CodeGen:
         logger.info("==================Begin TypeDefs=====================")
         # Boilerplate for Java global constants file
         global_virtual_constants_lines.append('''
-            package nanovm.wkpf;
+        package javax.wukong.virtualwuclasses;
 
             public class GENERATEDWKPF {
         ''')
@@ -442,7 +439,9 @@ class CodeGen:
           # Parsing to WuKong Profile Framework Component Library header in Java
           if wuclass.getAttribute('virtual') == 'true':
             wuclass_virtual_super_lines.append('''
-            package nanovm.wkpf;
+            package javax.wukong.virtualwuclasses;
+            import javax.wukong.wkpf.VirtualWuObject;
+            import javax.wukong.wkpf.WKPF;
 
             public abstract class %s extends VirtualWuObject {
               public static byte[] properties = new byte[] {
@@ -477,13 +476,12 @@ class CodeGen:
 
           # Generate C header for each native component implementation
           wuclass_native_header_lines.append('''
-          #include <wkpf.h>
           #include "native_wuclasses.h"
 
           #ifndef %sH
           #define %sH
 
-          extern wkpf_wuclass_definition %s;
+          extern wuclass_t %s;
 
           #endif
           ''' % (
@@ -494,20 +492,18 @@ class CodeGen:
 
           # Generate C implementation for each native component implementation
           wuclass_native_impl_lines.append('''
-          #include <wkpf.h>
           #include "native_wuclasses.h"
 
           #ifdef ENABLE_%s
 
-          extern void %s(wkpf_local_wuobject *wuobject);
+          extern void %s(wuobject_t *wuobject);
 
-          uint8_t %s[] = {
           ''' % (
                   wuClass.getCDefineName(),
                   wuClass.getCUpdateName(),
-                  wuClass.getCPropertyName(),
                 ))
 
+          wuclass_native_impl_properties_lines = ''
           for ind, property in enumerate(wuClass.getProperties().values()):
             datatype = property.getDataType()
             access = property.getAccess()
@@ -520,24 +516,23 @@ class CodeGen:
               line += ","
 
             line += "\n"
-            wuclass_native_impl_lines.append(line)
-
-          wuclass_native_impl_lines.append('''
-          };
-          ''')
+          wuclass_native_impl_properties_lines += line
 
           wuclass_native_impl_lines.append('''
-          wkpf_wuclass_definition %s = {
+          wuclass_t %s = {
             %s,
             %s,
             %d,
+            NULL,
+            {
             %s
+            }
           };
           ''' % (wuClass.getCName(), 
                 wuClass.getCConstName(),
                 wuClass.getCUpdateName(),
                 len(wuClass.getProperties()), 
-                wuClass.getCPropertyName()))
+                wuclass_native_impl_properties_lines()))
 
           wuclass_native_impl_lines.append('''
           #endif
diff --git a/wukong/master/wkpf/pynvc.py b/wukong/master/wkpf/pynvc.py
index 36bd06a..aa34867 100644
--- a/wukong/master/wkpf/pynvc.py
+++ b/wukong/master/wkpf/pynvc.py
@@ -4,6 +4,20 @@ import sys
 import os
 from configuration import *
 
+
+REPRG_DJ_OPEN                = 0x10
+REPRG_DJ_OPEN_R              = 0x11
+REPRG_DJ_WRITE               = 0x12
+REPRG_DJ_WRITE_R             = 0x13
+REPRG_DJ_COMMIT              = 0x14
+REPRG_DJ_COMMIT_R            = 0x15
+REPRG_DJ_REBOOT              = 0x16
+
+REPRG_DJ_RETURN_OK                 = 0x00
+REPRG_DJ_RETURN_REQUEST_RETRANSMIT = 0x01
+REPRG_DJ_RETURN_TOO_LARGE          = 0x02
+REPRG_DJ_RETURN_FAILED             = 0x03
+
 REPRG_OPEN                   = 0x10
 REPRG_OPEN_R                 = 0x11
 REPRG_WRITE                  = 0x20
diff --git a/wukong/master/wkpf/wkpfcomm.py b/wukong/master/wkpf/wkpfcomm.py
index 02f4418..6ea4793 100755
--- a/wukong/master/wkpf/wkpfcomm.py
+++ b/wukong/master/wkpf/wkpfcomm.py
@@ -370,16 +370,95 @@ class Communication:
     def reprogram(self, destination, filename, retry=False):
       master_busy()
 
-      ret = self.reprogramNvmdefault(destination, filename)
+      ret = self.reprogramInfusion(destination, filename)
       if retry:
         if not ret:
           print "Retrying after 5 seconds..."
           time.sleep(5)
-          return self.reprogramNvmdefault(destination, filename)
+          return self.reprogramInfusion(destination, filename)
       else:
         master_available()
         return ret
 
+    def reprogramInfusion(self, destination, filename):
+      MESSAGESIZE = 30
+
+      bytecode = []
+      with open(filename, "rb") as f:
+        byte = f.read(1)
+        while byte != "":
+          bytecode.append(ord(byte))
+          byte = f.read(1)
+
+      infusion_length = len(bytecode)
+      if infusion_length == 0:
+        print "Can't read infusion file"
+        return False
+
+      # Start the reprogramming process
+      print "Sending REPRG_OPEN command with image size ", len(bytecode)
+      reply = self.zwave.send(destination, pynvc.REPRG_DJ_OPEN, [len(bytecode) >> 8 & 0xFF, len(bytecode) & 0xFF], [pynvc.REPRG_DJ_OPEN_R])
+
+      if reply == None:
+        print "No reply from node to REPRG_OPEN command"
+        return False
+
+      if reply.payload[2] != pynvc.REPRG_DJ_RETURN_OK:
+        print "Got error in response to REPRG_OPEN: " + reply.payload[2]
+
+      pagesize = reply.payload[3] + reply.payload[4]*256
+
+      print "Uploading", len(bytecode), "bytes."
+
+      pos = 0
+      while not pos == len(bytecode):
+        payload_pos = [pos%256, pos/256]
+        payload_data = bytecode[pos:pos+MESSAGESIZE]
+        print "Uploading bytes", pos, "to", pos+MESSAGESIZE, "of", len(bytecode)
+        print pos/pagesize, (pos+len(payload_data))/pagesize, "of pagesize", pagesize
+        if pos/pagesize == (pos+len(payload_data))/pagesize:
+          self.zwave.send(destination, pynvc.REPRG_DJ_WRITE, payload_pos+payload_data, [])
+          pos += len(payload_data)
+        else:
+          print "Send last packet of this page and wait for a REPRG_DJ_WRITE_R after each full page"
+          reply = self.zwave.send(destination, pynvc.REPRG_DJ_WRITE, payload_pos+payload_data, [pynvc.REPRG_DJ_WRITE_R])
+          print "Reply: ", reply
+          if reply == None:
+            print "No reply received. Code update failed. :-("
+            return False
+          elif reply.payload[2] == pynvc.REPRG_DJ_RETURN_OK:
+            print "Received REPRG_DJ_RETURN_OK in reply to packet writing at", payload_pos
+            pos += len(payload_data)
+          elif reply.payload[2] == pynvc.REPRG_DJ_RETURN_REQUEST_RETRANSMIT:
+            pos = reply.payload[3] + reply.payload[4]*256
+            print "===========>Received REPRG_DJ_WRITE_R_RETRANSMIT request to retransmit from ", pos
+          else:
+            print "Unexpected reply:", reply.payload
+            return False
+        if pos == len(bytecode):
+          print "Send REPRG_DJ_COMMIT after last packet"
+          reply = self.zwave.send(destination, pynvc.REPRG_DJ_COMMIT, [pos%256, pos/256], [pynvc.REPRG_DJ_COMMIT_R])
+          print "Reply: ", reply
+          if reply == None:
+            print "No reply, commit failed."
+            return False
+          elif reply.payload[2] == pynvc.REPRG_DJ_RETURN_FAILED:
+            print "Received REPRG_DJ_RETURN_FAILED, commit failed."
+            return False
+          elif reply.payload[2] == pynvc.REPRG_DJ_RETURN_REQUEST_RETRANSMIT:
+            pos = reply.payload[3] + reply.payload[4]*256
+            print "===========>Received REPRG_COMMIT_R_RETRANSMIT request to retransmit from ", pos
+            if pos >= len(bytecode):
+              print "Received REPRG_DJ_RETURN_REQUEST_RETRANSMIT >= the image size. This shoudn't happen!"
+          elif reply.payload[2] == pynvc.REPRG_DJ_RETURN_OK:
+            print "Commit OK.", reply.payload
+          else:
+            print "Unexpected reply:", reply.payload
+            return False
+      self.zwave.send(destination, pynvc.REPRG_DJ_REBOOT, [], [])
+      print "Sent reboot.", reply.payload
+      return True;
+
     def reprogramNvmdefault(self, destination, filename):
       print "Reprogramming Nvmdefault..."
       MESSAGESIZE = 16
diff --git a/wukong/master/wkpf/wuapplication.py b/wukong/master/wkpf/wuapplication.py
index 0166d1d..1541e98 100644
--- a/wukong/master/wkpf/wuapplication.py
+++ b/wukong/master/wkpf/wuapplication.py
@@ -292,16 +292,16 @@ class WuApplication:
       self.status = "Compressing java to bytecode format"
       gevent.sleep(0)
 
-      # Generate nvmdefault.h
+      # Build the Java code
       self.info('==Compressing application code to bytecode format')
-      pp = Popen('cd %s; make application FLOWXML=%s' % (platform_dir, self.id), shell=True, stdout=PIPE, stderr=PIPE)
+      pp = Popen('cd %s/..; ant clean; ant master-create-deploy-archive' % (JAVA_OUTPUT_DIR), shell=True, stdout=PIPE, stderr=PIPE)
       self.returnCode = None
       (infomsg,errmsg) = pp.communicate()
 
       self.version += 1
       if pp.returncode != 0:
-        self.error('==Error generating nvmdefault.h')
-        self.status = "Error generating nvmdefault.h"
+        self.error('==Error generating wkdeploy.dja')
+        self.status = "Error generating wkdeploy.dja"
         self.info(infomsg)
         self.error(errmsg)
         gevent.sleep(0)
@@ -327,7 +327,7 @@ class WuApplication:
         ret = False
         retries = 3
         while retries > 0:
-          if not comm.reprogram(node_id, os.path.join(platform_dir, 'nvmdefault.h'), retry=False):
+          if not comm.reprogram(node_id, os.path.join(JAVA_OUTPUT_DIR, '..', 'build', 'wkdeploy.dja'), retry=False):
             self.status = "Deploy unsucessful for node %d, trying again" % (node_id)
             gevent.sleep(0)
             self.error('==Node not deployed successfully, retries = %d' % (retries))
diff --git a/wukong/master/wkpf/xml2java/jinja_templates/application2.java b/wukong/master/wkpf/xml2java/jinja_templates/application2.java
index c0b52fd..820516d 100644
--- a/wukong/master/wkpf/xml2java/jinja_templates/application2.java
+++ b/wukong/master/wkpf/xml2java/jinja_templates/application2.java
@@ -1,9 +1,7 @@
-import java.io.*;
-import nanovm.avr.*;
-import nanovm.wkpf.*;
-import nanovm.lang.Math;
+import javax.wukong.wkpf.*;
+import javax.wukong.virtualwuclasses.*;
 
-public class {{ name }} {
+public class WKDeploy {
 
     // =========== Begin: Generated by the translator from application WuML
     /* Component names to indexes:
@@ -27,7 +25,7 @@ public class {{ name }} {
     //component node id and port number table
     // each row corresponds to the component index mapped from component ID above
     // each row has two items: node id, port number
-    private final static byte[][] componentInstanceToWuObjectAddrMap = {
+    private final static Object[] componentInstanceToWuObjectAddrMap = {
       {%- for component in changesets.components %}
       new byte[]{ {%- for wuobject in component.instances %}
         {{ wuobject|wuobjectinjava }}{{ ',' if not loop.last else '' }}
@@ -36,7 +34,7 @@ public class {{ name }} {
       {%- endfor %}
     };
 
-    private final static byte[][] heartbeatToNodeAddrMap = {
+    private final static Object[] heartbeatToNodeAddrMap = {
       {%- for heartbeatgroup in changesets.heartbeatgroups %}
       new byte[]{ {%- for node in heartbeatgroup.nodes %}
         {{ node|nodeinjava }}{{ ',' if not loop.last else '' }}
@@ -53,10 +51,10 @@ public class {{ name }} {
     // =========== End: Generated by the translator from application WuML
 
     public static void main (String[] args) {
-        System.out.println("{{ name }}");
+        // System.out.println("{{ name }}");
         System.out.println(WKPF.getMyNodeId());
-        WKPF.loadHeartbeatToNodeAddrMap(heartbeatToNodeAddrMap);
-        WKPF.loadHeartbeatPeriods(heartbeatGroupPeriods);
+        // WKPF.loadHeartbeatToNodeAddrMap(heartbeatToNodeAddrMap);
+        // WKPF.loadHeartbeatPeriods(heartbeatGroupPeriods);
         WKPF.loadComponentToWuObjectAddrMap(componentInstanceToWuObjectAddrMap);
         WKPF.loadLinkDefinitions(linkDefinitions);
         initialiseLocalWuObjects();
@@ -81,18 +79,18 @@ public class {{ name }} {
 
                 // Virtual WuClasses (Java)
                 VirtualWuObject wuclassInstance{{ wuobject.wuclass|wuclassname }} = new {{ wuobject.wuclass|wuclassvirtualclassname }}();
-                WKPF.registerWuClass(WKPF.{{ wuobject.wuclass|wuclassconstname }}, {{ wuobject.wuclass|wuclassgenclassname }}.properties);
-                WKPF.createWuObject((short)WKPF.{{ wuobject.wuclass|wuclassconstname }}, WKPF.getPortNumberForComponent((short){{ component.index }}), wuclassInstance{{ wuobject.wuclass|wuclassname }});
+                WKPF.registerWuClass(GENERATEDWKPF.{{ wuobject.wuclass|wuclassconstname }}, {{ wuobject.wuclass|wuclassgenclassname }}.properties);
+                WKPF.createWuObject((short)GENERATEDWKPF.{{ wuobject.wuclass|wuclassconstname }}, WKPF.getPortNumberForComponent((short){{ component.index }}), wuclassInstance{{ wuobject.wuclass|wuclassname }});
                 {%- for property in wuobject.wuclass.properties -%}
                 {%- if property.value -%}
                 {% if property.datatype.lower() == 'boolean' %}
-                WKPF.setPropertyBoolean(wuclassInstance{{ wuobject.wuclass|wuclassname }}, WKPF.{{ property|propertyconstname }}, {{ property.value }});
+                WKPF.setPropertyBoolean(wuclassInstance{{ wuobject.wuclass|wuclassname }}, GENERATEDWKPF.{{ property|propertyconstname }}, {{ property.value }});
                 {% elif property.datatype.lower() == 'int' or property.datatype.lower() == 'short' %}
-                WKPF.setPropertyShort(wuclassInstance{{ wuobject.wuclass|wuclassname }}, WKPF.{{ property|propertyconstname }}, (short){{ property.value }});
+                WKPF.setPropertyShort(wuclassInstance{{ wuobject.wuclass|wuclassname }}, GENERATEDWKPF.{{ property|propertyconstname }}, (short){{ property.value }});
                 {% elif property.datatype.lower() == 'refresh_rate' %}
-                WKPF.setPropertyRefreshRate(wuclassInstance{{ wuobject.wuclass|wuclassname }}, WKPF.{{ property|propertyconstname }}, (short){{ property.value }});
+                WKPF.setPropertyRefreshRate(wuclassInstance{{ wuobject.wuclass|wuclassname }}, GENERATEDWKPF.{{ property|propertyconstname }}, (short){{ property.value }});
                 {% else %}
-                WKPF.setPropertyShort(wuclassInstance{{ wuobject.wuclass|wuclassname }}, WKPF.{{ property|propertyconstname }}, WKPF.{{ property|propertyconstantvalue }});
+                WKPF.setPropertyShort(wuclassInstance{{ wuobject.wuclass|wuclassname }}, GENERATEDWKPF.{{ property|propertyconstname }}, WKPF.{{ property|propertyconstantvalue }});
                 {%- endif -%}
                 {%- endif -%}
                 {%- endfor -%}
@@ -104,13 +102,13 @@ public class {{ name }} {
                 {%- for property in wuobject.wuclass.properties -%}
                 {%- if property.value -%}
                 {% if property.datatype.lower() == 'boolean' %}
-                WKPF.setPropertyBoolean((short){{ component.index }}, WKPF.{{ property|propertyconstname }}, {{ property.value }});
+                WKPF.setPropertyBoolean((short){{ component.index }}, GENERATEDWKPF.{{ property|propertyconstname }}, {{ property.value }});
                 {% elif property.datatype.lower() == 'int' or property.datatype.lower() == 'short' %}
-                WKPF.setPropertyShort((short){{ component.index }}, WKPF.{{ property|propertyconstname }}, (short){{ property.value }});
+                WKPF.setPropertyShort((short){{ component.index }}, GENERATEDWKPF.{{ property|propertyconstname }}, (short){{ property.value }});
                 {% elif property.datatype.lower() == 'refresh_rate' %}
-                WKPF.setPropertyRefreshRate((short){{ component.index }}, WKPF.{{ property|propertyconstname }}, (short){{ property.value }});
+                WKPF.setPropertyRefreshRate((short){{ component.index }}, GENERATEDWKPF.{{ property|propertyconstname }}, (short){{ property.value }});
                 {% else %}
-                WKPF.setPropertyShort((short){{ component.index }}, WKPF.{{ property|propertyconstname }}, WKPF.{{ property|propertyconstantvalue }});
+                WKPF.setPropertyShort((short){{ component.index }}, GENERATEDWKPF.{{ property|propertyconstname }}, WKPF.{{ property|propertyconstantvalue }});
                 {%- endif -%}
                 {%- endif -%}
                 {%- endfor -%}
diff --git a/wukong/master/wkpf/xml2java/translator.py b/wukong/master/wkpf/xml2java/translator.py
index 967d64c..788fe5d 100755
--- a/wukong/master/wkpf/xml2java/translator.py
+++ b/wukong/master/wkpf/xml2java/translator.py
@@ -369,10 +369,10 @@ public class {{ CLASS_NAME }} {
 def generateJava(application):
     application.setOutputDir(JAVA_OUTPUT_DIR)
     jinja2_env = Environment(loader=FileSystemLoader([os.path.join(os.path.dirname(__file__), 'jinja_templates')]))
-    output = open(os.path.join(application.destinationDir, application.applicationName+".java"), 'w')
+    output = open(os.path.join(application.destinationDir, "WKDeploy.java"), 'w')
     wuObjects = sorted(application.wuObjects.values(), key=lambda obj: obj[0].getInstanceIndex())
         
-    print 'generating', os.path.join(application.destinationDir, application.applicationName+".java")
+    print 'generating', os.path.join(application.destinationDir, "WKDeploy.java")
     print wuObjects[0][0].getProperties()
 
     output.write(jinja2_env.get_template('application.java').render(applicationName=application.applicationName, wuObjects=wuObjects, wuLinks=application.wuLinks,
-- 
1.7.11.1

From 7a3403c2ddaba031d4560f3e4655b12c04e07fe8 Mon Sep 17 00:00:00 2001
From: Niels Reijers <nielsreijers@gmail.com>
Date: Thu, 21 Mar 2013 18:17:20 +0800
Subject: [PATCH] Small typo in codegen

---
 wukong/master/wkpf/codegen.py | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/wukong/master/wkpf/codegen.py b/wukong/master/wkpf/codegen.py
index 89c91c1..82e7921 100755
--- a/wukong/master/wkpf/codegen.py
+++ b/wukong/master/wkpf/codegen.py
@@ -531,8 +531,8 @@ class CodeGen:
           ''' % (wuClass.getCName(), 
                 wuClass.getCConstName(),
                 wuClass.getCUpdateName(),
-                len(wuClass.getProperties()), 
-                wuclass_native_impl_properties_lines()))
+                len(wuClass.getProperties()),
+                wuclass_native_impl_properties_lines))
 
           wuclass_native_impl_lines.append('''
           #endif
-- 
1.7.11.1

From ec88fcba742b2a4ca45a1ba81375de9feebd55d3 Mon Sep 17 00:00:00 2001
From: Niels Reijers <nielsreijers@gmail.com>
Date: Thu, 21 Mar 2013 18:37:38 +0800
Subject: [PATCH] Small fixes to code generation

---
 src/app/wkdeploy/build.xml                                    | 2 +-
 wukong/master/wkpf/xml2java/generator.py                      | 4 ++--
 wukong/master/wkpf/xml2java/jinja_templates/application2.java | 8 ++++----
 3 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/app/wkdeploy/build.xml b/src/app/wkdeploy/build.xml
index 94199a6..23d5032 100644
--- a/src/app/wkdeploy/build.xml
+++ b/src/app/wkdeploy/build.xml
@@ -5,7 +5,7 @@
 	<property name="name" value="wkdeploy"/>
 	
 	<!-- list of libraries this library depends on -->
-	<property name="lib-depends" value="base, darjeeling2, uart, wkcomm, wkpf"/>
+	<property name="lib-depends" value="base, darjeeling3, uart, wkcomm, wkpf"/>
 	
 	<!-- include the library build template -->
 	<import file="../app.xml"/>
diff --git a/wukong/master/wkpf/xml2java/generator.py b/wukong/master/wkpf/xml2java/generator.py
index 2078d3e..7fc40e6 100755
--- a/wukong/master/wkpf/xml2java/generator.py
+++ b/wukong/master/wkpf/xml2java/generator.py
@@ -57,7 +57,7 @@ class Generator:
                 return 'ENUM' + '_' + Convert.to_constant(property.datatype) + "_" + Convert.to_constant(property.value)
 
 
-        print 'generating', os.path.join(JAVA_OUTPUT_DIR, name+".java")
+        print 'generating', os.path.join(JAVA_OUTPUT_DIR, "WKDeploy.java")
         jinja2_env = Environment(loader=FileSystemLoader([os.path.join(os.path.dirname(__file__), 'jinja_templates')]))
         jinja2_env.filters['nodeinjava'] = nodeinjava
         jinja2_env.filters['wuobjectinjava'] = wuobjectinjava
@@ -68,6 +68,6 @@ class Generator:
         jinja2_env.filters['wuclassgenclassname'] = wuclassgenclassname
         jinja2_env.filters['propertyconstname'] = propertyconstname
         jinja2_env.filters['propertyconstantvalue'] = propertyconstantvalue
-        output = open(os.path.join(JAVA_OUTPUT_DIR, name + ".java"), 'w')
+        output = open(os.path.join(JAVA_OUTPUT_DIR, "WKDeploy.java"), 'w')
         output.write(jinja2_env.get_template('application2.java').render(name=name, changesets=changesets))
         output.close()
diff --git a/wukong/master/wkpf/xml2java/jinja_templates/application2.java b/wukong/master/wkpf/xml2java/jinja_templates/application2.java
index 820516d..bafb5f5 100644
--- a/wukong/master/wkpf/xml2java/jinja_templates/application2.java
+++ b/wukong/master/wkpf/xml2java/jinja_templates/application2.java
@@ -52,7 +52,7 @@ public class WKDeploy {
 
     public static void main (String[] args) {
         // System.out.println("{{ name }}");
-        System.out.println(WKPF.getMyNodeId());
+        System.out.println("My node id: " + WKPF.getMyNodeId());
         // WKPF.loadHeartbeatToNodeAddrMap(heartbeatToNodeAddrMap);
         // WKPF.loadHeartbeatPeriods(heartbeatGroupPeriods);
         WKPF.loadComponentToWuObjectAddrMap(componentInstanceToWuObjectAddrMap);
@@ -90,7 +90,7 @@ public class WKDeploy {
                 {% elif property.datatype.lower() == 'refresh_rate' %}
                 WKPF.setPropertyRefreshRate(wuclassInstance{{ wuobject.wuclass|wuclassname }}, GENERATEDWKPF.{{ property|propertyconstname }}, (short){{ property.value }});
                 {% else %}
-                WKPF.setPropertyShort(wuclassInstance{{ wuobject.wuclass|wuclassname }}, GENERATEDWKPF.{{ property|propertyconstname }}, WKPF.{{ property|propertyconstantvalue }});
+                WKPF.setPropertyShort(wuclassInstance{{ wuobject.wuclass|wuclassname }}, GENERATEDWKPF.{{ property|propertyconstname }}, GENERATEDWKPF.{{ property|propertyconstantvalue }});
                 {%- endif -%}
                 {%- endif -%}
                 {%- endfor -%}
@@ -98,7 +98,7 @@ public class WKDeploy {
                 {% else %}
 
                 // Native WuClasses (C)
-                WKPF.createWuObject((short)WKPF.{{ wuobject.wuclass|wuclassconstname }}, WKPF.getPortNumberForComponent((short){{ component.index }}), null);
+                WKPF.createWuObject((short)GENERATEDWKPF.{{ wuobject.wuclass|wuclassconstname }}, WKPF.getPortNumberForComponent((short){{ component.index }}), null);
                 {%- for property in wuobject.wuclass.properties -%}
                 {%- if property.value -%}
                 {% if property.datatype.lower() == 'boolean' %}
@@ -108,7 +108,7 @@ public class WKDeploy {
                 {% elif property.datatype.lower() == 'refresh_rate' %}
                 WKPF.setPropertyRefreshRate((short){{ component.index }}, GENERATEDWKPF.{{ property|propertyconstname }}, (short){{ property.value }});
                 {% else %}
-                WKPF.setPropertyShort((short){{ component.index }}, GENERATEDWKPF.{{ property|propertyconstname }}, WKPF.{{ property|propertyconstantvalue }});
+                WKPF.setPropertyShort((short){{ component.index }}, GENERATEDWKPF.{{ property|propertyconstname }}, GENERATEDWKPF.{{ property|propertyconstantvalue }});
                 {%- endif -%}
                 {%- endif -%}
                 {%- endfor -%}
-- 
1.7.11.1

From d3b25c8907ecb16460ce8260c1b67ce299e51552 Mon Sep 17 00:00:00 2001
From: Niels Reijers <nielsreijers@gmail.com>
Date: Thu, 21 Mar 2013 19:12:58 +0800
Subject: [PATCH] Fix to reprogramming on native platform

---
 src/lib/wkreprog/c/posix/wkreprog_impl.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/lib/wkreprog/c/posix/wkreprog_impl.c b/src/lib/wkreprog/c/posix/wkreprog_impl.c
index 2405a14..1abddce 100644
--- a/src/lib/wkreprog/c/posix/wkreprog_impl.c
+++ b/src/lib/wkreprog/c/posix/wkreprog_impl.c
@@ -31,8 +31,7 @@ void wkreprog_impl_close() {
   if (fp== NULL) {
 	  printf("Error in opening file to write infusion to...\n");
   }
-  // Skip first 4 bytes we get, which contain the length of the archive (needed for targets like AVR, but not for native since we'll just read the file from disk)
-  fwrite(wkreprog_impl_buffer+4, wkreprog_impl_pos-4, 1, fp);
+  fwrite(wkreprog_impl_buffer, wkreprog_impl_pos, 1, fp);
   fclose(fp);
 }
 
-- 
1.7.11.1

From a01b1f8e01d2c0a201c0f44770efaa7b3acf99f7 Mon Sep 17 00:00:00 2001
From: Niels Reijers <nielsreijers@gmail.com>
Date: Thu, 21 Mar 2013 19:26:24 +0800
Subject: [PATCH] Bugfix to code generation of native wuclasses

---
 wukong/master/wkpf/codegen.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/wukong/master/wkpf/codegen.py b/wukong/master/wkpf/codegen.py
index 82e7921..14901db 100755
--- a/wukong/master/wkpf/codegen.py
+++ b/wukong/master/wkpf/codegen.py
@@ -516,7 +516,7 @@ class CodeGen:
               line += ","
 
             line += "\n"
-          wuclass_native_impl_properties_lines += line
+            wuclass_native_impl_properties_lines += line
 
           wuclass_native_impl_lines.append('''
           wuclass_t %s = {
-- 
1.7.11.1

